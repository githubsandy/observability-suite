#!/bin/bash

# ===============================================================================
# üîÑ OBSERVABILITY SUITE - HELM UPGRADE SCRIPT
# ===============================================================================
# Simple script to upgrade existing deployment with current values.yaml
# Use after running deploy-observability-stack.sh to apply configuration changes
# ===============================================================================

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
CONFIG_FILE="customer-config.env"
CHART_DIR="./helm-kube-observability-stack"
RELEASE_NAME="ao-observability"

echo -e "${BLUE}üîÑ Observability Suite - Helm Upgrade${NC}"
echo -e "${BLUE}======================================${NC}"
echo ""

# Check if config file exists to get namespace
if [ ! -f "$CONFIG_FILE" ]; then
    echo -e "${RED}‚ùå Error: $CONFIG_FILE not found!${NC}"
    exit 1
fi

# Load configuration to get namespace
source "$CONFIG_FILE"
KUBERNETES_NAMESPACE=${KUBERNETES_NAMESPACE:-ao-os}

echo -e "${CYAN}üì¶ Release: $RELEASE_NAME${NC}"
echo -e "${CYAN}üèóÔ∏è  Namespace: $KUBERNETES_NAMESPACE${NC}"
echo -e "${CYAN}üìÅ Chart: $CHART_DIR${NC}"
echo ""

# Check if deployment exists
if ! helm status $RELEASE_NAME -n $KUBERNETES_NAMESPACE &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: No existing deployment found.${NC}"
    echo -e "${YELLOW}üí° Use ./deploy-observability-stack.sh for initial deployment${NC}"
    exit 1
fi

echo -e "${BLUE}üöÄ Running Helm upgrade...${NC}"

# Add timestamp to force pod restart on config changes
TIMESTAMP=$(date +%s)
helm upgrade $RELEASE_NAME $CHART_DIR --namespace $KUBERNETES_NAMESPACE \
  --set-string global.restartTimestamp="$TIMESTAMP" \
  --force \
  --wait \
  --timeout=10m

echo -e "${CYAN}‚ôªÔ∏è  Rolling restart all deployments to ensure config updates...${NC}"
kubectl rollout restart deployment -n $KUBERNETES_NAMESPACE
kubectl rollout restart daemonset -n $KUBERNETES_NAMESPACE

echo -e "${CYAN}‚è≥ Waiting for rollout to complete...${NC}"
kubectl rollout status deployment --all -n $KUBERNETES_NAMESPACE --timeout=300s
kubectl rollout status daemonset --all -n $KUBERNETES_NAMESPACE --timeout=300s

if [ $? -eq 0 ]; then
    echo ""
    echo -e "${GREEN}‚úÖ Helm upgrade completed successfully!${NC}"
    echo ""
    echo -e "${CYAN}üîç Check status: helm status $RELEASE_NAME -n $KUBERNETES_NAMESPACE${NC}"
    echo -e "${CYAN}üëÄ Watch pods: kubectl get pods -n $KUBERNETES_NAMESPACE -w${NC}"
    echo ""
    if [ -n "$KUBERNETES_NODE_IP" ]; then
        echo -e "${BLUE}üåê Access Grafana: http://$KUBERNETES_NODE_IP:30300${NC}"
    fi
else
    echo -e "${RED}‚ùå Helm upgrade failed. Check the error messages above.${NC}"
    exit 1
fi