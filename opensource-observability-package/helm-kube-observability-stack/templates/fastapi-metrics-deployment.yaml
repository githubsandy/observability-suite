apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi-metrics
  namespace: {{ .Values.namespace }}
  labels:
    app: fastapi-metrics
spec:
  replicas: {{ .Values.fastApiMetrics.replicas }}
  selector:
    matchLabels:
      app: fastapi-metrics
  template:
    metadata:
      labels:
        app: fastapi-metrics
    spec:
      containers:
      - name: fastapi-metrics
        image: {{ .Values.fastApiMetrics.image }}
        command: ["/bin/bash"]
        args: ["-c", "pip install fastapi uvicorn prometheus_client && python -c \"
from fastapi import FastAPI
from prometheus_client import Counter, Histogram, start_http_server
import uvicorn
import os
from threading import Thread
import time

# Create FastAPI app
app = FastAPI(title='Test Automation Metrics')

# Prometheus metrics
test_counter = Counter('test_executions_total', 'Total test executions', ['framework', 'status'])
test_duration = Histogram('test_execution_duration_seconds', 'Test execution duration')

@app.get('/')
def root():
    return {'message': 'FastAPI Metrics Server', 'status': 'running'}

@app.get('/health')
def health():
    return {'status': 'healthy'}

@app.get('/ready')
def ready():
    return {'status': 'ready'}

@app.get('/metrics')
def get_metrics():
    # Simulate some test metrics
    test_counter.labels(framework='cxtaf', status='success').inc(10)
    test_counter.labels(framework='cxtm', status='success').inc(5)
    return {'message': 'Metrics available on port 8001'}

# Start Prometheus metrics server on port 8001
def start_metrics_server():
    start_http_server(int(os.getenv('METRICS_PORT', 8001)))
    
metrics_thread = Thread(target=start_metrics_server)
metrics_thread.start()

# Start FastAPI app on port 8000
uvicorn.run(app, host='0.0.0.0', port=int(os.getenv('APP_PORT', 8000)))
\""]
        ports:
        - containerPort: 8000
          name: http-app
        - containerPort: 8001
          name: http-metrics
        env:
        - name: METRICS_PORT
          value: "8001"
        - name: APP_PORT
          value: "8000"
        - name: LOG_LEVEL
          value: {{ .Values.fastApiMetrics.logLevel | quote }}
        resources:
          limits:
            cpu: {{ .Values.fastApiMetrics.resources.limits.cpu }}
            memory: {{ .Values.fastApiMetrics.resources.limits.memory }}
          requests:
            cpu: {{ .Values.fastApiMetrics.resources.requests.cpu }}
            memory: {{ .Values.fastApiMetrics.resources.requests.memory }}
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: fastapi-config
          mountPath: /app/config
      volumes:
      - name: fastapi-config
        configMap:
          name: fastapi-metrics-config