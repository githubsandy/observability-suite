{{- if .Values.notifications.webex.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: webex-webhook-config
  namespace: {{ .Values.namespace }}
data:
  webex-webhook.py: |
    #!/usr/bin/env python3
    """
    Cisco WebEx Teams Notification Service for AlertManager
    Processes AlertManager webhooks and sends formatted messages to WebEx Teams
    """
    from flask import Flask, request, jsonify
    import requests
    import json
    import logging
    from datetime import datetime
    import os

    app = Flask(__name__)
    logging.basicConfig(level=logging.INFO)

    # WebEx Configuration
    WEBEX_BOT_TOKEN = os.environ.get('WEBEX_BOT_TOKEN', '{{ .Values.notifications.webex.bot_token }}')
    WEBEX_ROOM_ID = os.environ.get('WEBEX_ROOM_ID', '{{ .Values.notifications.webex.room_id }}')
    WEBEX_API_URL = "https://webexapis.com/v1/messages"

    def create_adaptive_card(alerts):
        """Create WebEx Adaptive Card for alerts"""
        # Determine overall severity
        severities = [alert['labels'].get('severity', 'info') for alert in alerts]
        max_severity = 'critical' if 'critical' in severities else 'warning' if 'warning' in severities else 'info'

        # Color coding
        color_map = {
            'critical': '#FF4757',  # Red
            'warning': '#FFA502',   # Orange
            'info': '#3742FA'       # Blue
        }

        # Icon mapping
        icon_map = {
            'critical': 'üî•',
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è'
        }

        card = {
            "type": "AdaptiveCard",
            "version": "1.3",
            "body": [
                {
                    "type": "Container",
                    "style": "attention" if max_severity == 'critical' else "warning" if max_severity == 'warning' else "default",
                    "items": [
                        {
                            "type": "TextBlock",
                            "text": f"{icon_map[max_severity]} **{max_severity.upper()} ALERT**",
                            "size": "Large",
                            "weight": "Bolder",
                            "color": "Attention" if max_severity == 'critical' else "Warning" if max_severity == 'warning' else "Default"
                        },
                        {
                            "type": "TextBlock",
                            "text": f"Observability Suite - {len(alerts)} alert(s) triggered",
                            "size": "Medium",
                            "isSubtle": True,
                            "spacing": "Small"
                        }
                    ]
                }
            ]
        }

        # Add alert details
        for i, alert in enumerate(alerts):
            alert_container = {
                "type": "Container",
                "separator": True if i > 0 else False,
                "items": [
                    {
                        "type": "TextBlock",
                        "text": f"**{alert['annotations'].get('summary', 'Unknown Alert')}**",
                        "weight": "Bolder",
                        "size": "Medium"
                    },
                    {
                        "type": "TextBlock",
                        "text": alert['annotations'].get('description', 'No description available'),
                        "wrap": True,
                        "spacing": "Small"
                    }
                ]
            }

            # Add fact set for structured info
            facts = []
            if 'instance' in alert['labels']:
                facts.append({"title": "Instance", "value": alert['labels']['instance']})
            if 'namespace' in alert['labels']:
                facts.append({"title": "Namespace", "value": alert['labels']['namespace']})
            if 'pod' in alert['labels']:
                facts.append({"title": "Pod", "value": alert['labels']['pod']})

            facts.append({
                "title": "Severity",
                "value": alert['labels'].get('severity', 'unknown').upper()
            })
            facts.append({
                "title": "Started",
                "value": alert.get('startsAt', 'Unknown')[:19].replace('T', ' ')
            })

            if facts:
                alert_container["items"].append({
                    "type": "FactSet",
                    "facts": facts,
                    "spacing": "Small"
                })

            card["body"].append(alert_container)

        # Add action buttons
        actions = {
            "type": "ActionSet",
            "actions": [
                {
                    "type": "Action.OpenUrl",
                    "title": "üìä Open Grafana",
                    "url": f"http://{{ .Values.notifications.grafana_url | default 'YOUR-NODE-IP:30300' }}"
                },
                {
                    "type": "Action.OpenUrl",
                    "title": "üîç Open Prometheus",
                    "url": f"http://{{ .Values.notifications.prometheus_url | default 'YOUR-NODE-IP:30090' }}"
                }
            ]
        }

        card["body"].append(actions)
        return card

    @app.route('/webex-webhook', methods=['POST'])
    def send_webex_notification():
        """Process AlertManager webhook and send to WebEx Teams"""
        try:
            alert_data = request.get_json()
            alerts = alert_data.get('alerts', [])

            if not alerts:
                return jsonify({'status': 'success', 'message': 'No alerts to process'})

            # Create adaptive card
            adaptive_card = create_adaptive_card(alerts)

            # Send to WebEx Teams
            headers = {
                'Authorization': f'Bearer {WEBEX_BOT_TOKEN}',
                'Content-Type': 'application/json'
            }

            # Prepare message payload
            payload = {
                'roomId': WEBEX_ROOM_ID,
                'text': f"Alert notification from Observability Suite ({len(alerts)} alerts)",
                'attachments': [{
                    'contentType': 'application/vnd.microsoft.card.adaptive',
                    'content': adaptive_card
                }]
            }

            # Send message
            response = requests.post(WEBEX_API_URL, headers=headers, json=payload)

            if response.status_code == 200:
                logging.info(f"Successfully sent WebEx notification for {len(alerts)} alerts")
                return jsonify({'status': 'success', 'message': f'Sent notification for {len(alerts)} alerts'})
            else:
                logging.error(f"Failed to send WebEx notification: {response.status_code} - {response.text}")
                return jsonify({'status': 'error', 'message': f'WebEx API error: {response.status_code}'}), 500

        except Exception as e:
            logging.error(f"Error processing WebEx webhook: {str(e)}")
            return jsonify({'status': 'error', 'message': str(e)}), 500

    @app.route('/health', methods=['GET'])
    def health():
        return jsonify({'status': 'healthy', 'service': 'webex-webhook-processor'})

    @app.route('/test-webex', methods=['POST'])
    def test_webex():
        """Test endpoint to verify WebEx integration"""
        test_message = {
            'roomId': WEBEX_ROOM_ID,
            'text': 'üß™ Test message from Observability Suite WebEx integration'
        }

        headers = {
            'Authorization': f'Bearer {WEBEX_BOT_TOKEN}',
            'Content-Type': 'application/json'
        }

        try:
            response = requests.post(WEBEX_API_URL, headers=headers, json=test_message)
            if response.status_code == 200:
                return jsonify({'status': 'success', 'message': 'Test message sent successfully'})
            else:
                return jsonify({'status': 'error', 'message': f'WebEx API error: {response.status_code}'}), 500
        except Exception as e:
            return jsonify({'status': 'error', 'message': str(e)}), 500

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=8080, debug=False)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webex-webhook-processor
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webex-webhook-processor
  template:
    metadata:
      labels:
        app: webex-webhook-processor
    spec:
      containers:
      - name: webex-webhook
        image: python:3.9-slim
        command: ["/bin/bash", "-c"]
        args:
        - |
          pip install flask requests
          python /app/webex-webhook.py
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: webhook-script
          mountPath: /app
        env:
        - name: WEBEX_BOT_TOKEN
          valueFrom:
            secretKeyRef:
              name: webex-credentials
              key: bot_token
        - name: WEBEX_ROOM_ID
          valueFrom:
            secretKeyRef:
              name: webex-credentials
              key: room_id
        resources:
          limits:
            memory: "256Mi"
            cpu: "200m"
          requests:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: webhook-script
        configMap:
          name: webex-webhook-config
          defaultMode: 0755

---
apiVersion: v1
kind: Service
metadata:
  name: webex-webhook-processor
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: webex-webhook-processor
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30951  # Direct IP access for WebEx webhook
  type: NodePort

---
apiVersion: v1
kind: Secret
metadata:
  name: webex-credentials
  namespace: {{ .Values.namespace }}
type: Opaque
data:
  bot_token: {{ .Values.notifications.webex.bot_token | b64enc }}
  room_id: {{ .Values.notifications.webex.room_id | b64enc }}

---
# WebEx Teams Configuration Helper
apiVersion: v1
kind: ConfigMap
metadata:
  name: webex-setup-guide
  namespace: {{ .Values.namespace }}
data:
  setup-instructions.md: |
    # WebEx Teams Integration Setup Guide

    ## Prerequisites
    1. Create a WebEx Teams Bot
    2. Get Bot Token
    3. Create/Identify Room ID
    4. Configure values.yaml

    ## Step 1: Create WebEx Teams Bot
    1. Go to https://developer.webex.com/my-apps
    2. Click "Create a New App"
    3. Select "Create a Bot"
    4. Fill in bot details:
       - Bot name: "Observability-Alert-Bot"
       - Bot username: "observability-bot@webex.bot"
       - Description: "Bot for Kubernetes observability alerts"

    ## Step 2: Get Bot Token
    - After creating bot, copy the "Bot Access Token"
    - Update values.yaml with this token

    ## Step 3: Get Room ID
    Option A - Existing Room:
    1. Add your bot to existing room
    2. Use WebEx Teams API to get room ID:
       ```
       curl -X GET "https://webexapis.com/v1/rooms" \
            -H "Authorization: Bearer YOUR_BOT_TOKEN"
       ```

    Option B - New Room:
    1. Create new room in WebEx Teams
    2. Add your bot to the room
    3. Get room ID using API above

    ## Step 4: Update values.yaml
    ```yaml
    notifications:
      webex:
        enabled: true
        bot_token: "YOUR_BOT_TOKEN_HERE"
        room_id: "YOUR_ROOM_ID_HERE"
    ```

    ## Test Integration
    After deployment, test with:
    ```bash
    kubectl port-forward svc/webex-webhook-processor 8080:8080 -n {{ $.Values.namespace }}
    curl -X POST http://localhost:8080/test-webex
    ```
{{- end }}