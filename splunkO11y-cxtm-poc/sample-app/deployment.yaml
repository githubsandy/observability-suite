apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app
  namespace: app-test
  labels:
    app: sample-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sample-app
  template:
    metadata:
      labels:
        app: sample-app
    spec:
      containers:
      - name: sample-app
        image: tiangolo/uwsgi-nginx-flask:python3.11
        command:
        - python
        - -c
        - |
          from flask import Flask, jsonify
          import time, random, logging

          # ORIGINAL: Same logging setup
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          # MANUAL INSTRUMENTATION: Simulated SDK setup (shows what would be added)
          print('MANUAL INSTRUMENTATION: Initializing OpenTelemetry SDK')
          print('MANUAL INSTRUMENTATION: TracerProvider configured')
          print('MANUAL INSTRUMENTATION: OTLP Exporter configured for Splunk')

          # ORIGINAL: Same Flask app creation
          app = Flask(__name__)

          print('MANUAL INSTRUMENTATION: Flask auto-instrumentation applied')

          # MANUAL INSTRUMENTATION: WRAP original function (business logic unchanged)
          def simulate_database_call():
              print('MANUAL INSTRUMENTATION: Starting database_operation span')
              # ORIGINAL CODE: Exact same business logic (UNCHANGED)
              time.sleep(random.uniform(0.01, 0.05))
              result = {'data': 'record_' + str(random.randint(1000, 9999))}
              # MANUAL INSTRUMENTATION: Simulated span attributes
              print('MANUAL INSTRUMENTATION: database_operation - db.operation=query')
              print('MANUAL INSTRUMENTATION: Ending database_operation span')
              return result  # ORIGINAL: Same return value

          @app.route('/')  # ORIGINAL: Same route decorator
          def home():      # ORIGINAL: Same function name
              print('MANUAL INSTRUMENTATION: Starting home_endpoint span')
              logger.info('Home endpoint accessed - MANUAL INSTRUMENTATION')

              # ORIGINAL: Same business logic call (UNCHANGED)
              db_data = simulate_database_call()

              print('MANUAL INSTRUMENTATION: home_endpoint - endpoint=home')
              print('MANUAL INSTRUMENTATION: Ending home_endpoint span')

              # ORIGINAL: Same return structure (just updated values)
              return jsonify({
                  'service': 'sample-app-manual',   # UPDATED
                  'status': 'running',              # ORIGINAL
                  'version': '1.0.0',               # ORIGINAL
                  'instrumentation': 'manual',      # UPDATED (was 'none')
                  'data': db_data,                  # ORIGINAL
                  'message': 'MANUAL: Code changes required but business logic preserved',
                  'crash_learning': 'Previous complex version crashed - this shows deployment risk!'
              })

          @app.route('/healthz')  # ORIGINAL: Same route
          def health():           # ORIGINAL: Same function name
              print('MANUAL INSTRUMENTATION: Starting health_check span')
              print('MANUAL INSTRUMENTATION: Ending health_check span')
              # ORIGINAL: Same return structure (just updated instrumentation field)
              return jsonify({'status': 'healthy', 'instrumentation': 'manual'})

          @app.route('/api/users')  # ORIGINAL: Same route
          def get_users():          # ORIGINAL: Same function name
              print('MANUAL INSTRUMENTATION: Starting get_users_api span')
              logger.info('Getting users - MANUAL INSTRUMENTATION')

              # ORIGINAL: Same business logic call (UNCHANGED)
              db_data = simulate_database_call()

              # ORIGINAL: Same user data creation (UNCHANGED)
              users = [{'id': 1, 'name': 'John Doe'}, {'id': 2, 'name': 'Jane Smith'}]

              print('MANUAL INSTRUMENTATION: get_users_api - users.count=2')
              print('MANUAL INSTRUMENTATION: Ending get_users_api span')

              # ORIGINAL: Same return structure (updated instrumentation field)
              return jsonify({
                  'users': users,               # ORIGINAL
                  'metadata': db_data,          # ORIGINAL
                  'instrumentation': 'manual',  # UPDATED (was 'none')
                  'note': 'Business logic unchanged, only observability added'
              })

          print('MANUAL INSTRUMENTATION: Starting Flask app with simulated tracing')
          # ORIGINAL: Same Flask app startup
          app.run(host='0.0.0.0', port=80, debug=True)
        ports:
        - containerPort: 80

        # MANUAL INSTRUMENTATION: ADD environment variables (REQUIRED)
        env:
        - name: OTEL_SERVICE_NAME
          value: "sample-app-manual"
        - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: "http://splunk-otel-collector-agent.ao.svc.cluster.local:4318/v1/traces"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.version=1.0.0,deployment.environment=production"

        readinessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: sample-app-service
  namespace: app-test
spec:
  selector:
    app: sample-app
  ports:
  - port: 8080
    targetPort: 80
    nodePort: 30080
  type: NodePort