apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app
  namespace: app-test
  labels:
    app: sample-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sample-app
  template:
    metadata:
      labels:
        app: sample-app
    spec:
      containers:
      - name: sample-app
        image: tiangolo/uwsgi-nginx-flask:python3.11
        command:
        - python
        - -c
        - |
          # MANUAL INSTRUMENTATION: SIMULATED VERSION (shows code changes without network dependencies)
          from flask import Flask, jsonify
          import time, random, logging
          import os

          # MANUAL INSTRUMENTATION: SIMULATED OpenTelemetry classes (shows what would be imported)
          class MockSpan:
              def __init__(self, name):
                  self.name = name
                  self.attributes = {}
              def set_attribute(self, key, value):
                  self.attributes[key] = value
                  print(f'MANUAL INSTRUMENTATION: Span \"{self.name}\" - {key}={value}')
              def __enter__(self):
                  print(f'MANUAL INSTRUMENTATION: Starting span \"{self.name}\"')
                  return self
              def __exit__(self, *args):
                  print(f'MANUAL INSTRUMENTATION: Ending span \"{self.name}\" with attributes: {self.attributes}')

          class MockTracer:
              def start_as_current_span(self, name):
                  return MockSpan(name)

          # ORIGINAL: Same logging setup
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          # MANUAL INSTRUMENTATION: SIMULATED SDK setup (shows what code would be added)
          print('MANUAL INSTRUMENTATION: Initializing OpenTelemetry SDK (SIMULATED)')
          print('MANUAL INSTRUMENTATION: - TracerProvider configured')
          print('MANUAL INSTRUMENTATION: - OTLP Exporter configured')
          print('MANUAL INSTRUMENTATION: - Service name: sample-app-manual')

          tracer = MockTracer()  # In real version: trace.get_tracer(__name__)

          # ORIGINAL: Same Flask app creation
          app = Flask(__name__)

          # MANUAL INSTRUMENTATION: SIMULATED auto-instrumentation (shows what would be added)
          print('MANUAL INSTRUMENTATION: Flask auto-instrumentation applied (SIMULATED)')

          # MANUAL INSTRUMENTATION: WRAP original function with span (business logic unchanged)
          def simulate_database_call():
              with tracer.start_as_current_span('database_operation') as span:
                  span.set_attribute('db.operation', 'query')
                  # ORIGINAL CODE: Exact same business logic (UNCHANGED)
                  time.sleep(random.uniform(0.01, 0.05))
                  result = {'data': f'record_{random.randint(1000, 9999)}'}
                  # MANUAL INSTRUMENTATION: ADD span attributes (business logic untouched)
                  span.set_attribute('db.result_size', len(str(result)))
                  return result  # ORIGINAL: Same return value

          @app.route('/')  # ORIGINAL: Same route decorator
          def home():      # ORIGINAL: Same function name
              # MANUAL INSTRUMENTATION: WRAP with span
              with tracer.start_as_current_span('home_endpoint') as span:
                  # ORIGINAL: Same log message (just updated text)
                  logger.info('Home endpoint accessed - MANUAL INSTRUMENTATION')
                  # MANUAL INSTRUMENTATION: ADD span attributes
                  span.set_attribute('endpoint', 'home')

                  # ORIGINAL: Same business logic call (UNCHANGED)
                  db_data = simulate_database_call()

                  # ORIGINAL: Same return structure (just updated values)
                  return jsonify({
                      'service': 'sample-app',      # ORIGINAL
                      'status': 'running',          # ORIGINAL
                      'version': '1.0.0',           # ORIGINAL
                      'instrumentation': 'manual',  # UPDATED (was 'none')
                      'data': db_data,              # ORIGINAL
                      'message': 'MANUAL INSTRUMENTATION: Code changes required but business logic preserved',
                      'code_changes': 'Added OpenTelemetry imports, SDK setup, and span wrapping'
                  })

          @app.route('/healthz')  # ORIGINAL: Same route
          def health():           # ORIGINAL: Same function name
              # MANUAL INSTRUMENTATION: WRAP with span
              with tracer.start_as_current_span('health_check'):
                  # ORIGINAL: Same return structure (just updated instrumentation field)
                  return jsonify({'status': 'healthy', 'instrumentation': 'manual'})

          @app.route('/api/users')  # ORIGINAL: Same route
          def get_users():          # ORIGINAL: Same function name
              # MANUAL INSTRUMENTATION: WRAP with span
              with tracer.start_as_current_span('get_users_api') as span:
                  # ORIGINAL: Same log message (updated text)
                  logger.info('Getting users - MANUAL INSTRUMENTATION')

                  # ORIGINAL: Same business logic call (UNCHANGED)
                  db_data = simulate_database_call()

                  # ORIGINAL: Same user data creation (UNCHANGED)
                  users = [{'id': 1, 'name': 'John Doe'}, {'id': 2, 'name': 'Jane Smith'}]

                  # MANUAL INSTRUMENTATION: ADD span attributes
                  span.set_attribute('users.count', len(users))

                  # ORIGINAL: Same return structure (updated instrumentation field)
                  return jsonify({
                      'users': users,               # ORIGINAL
                      'metadata': db_data,          # ORIGINAL
                      'instrumentation': 'manual',  # UPDATED (was 'none')
                      'span_info': 'Custom spans created manually in code'
                  })

          print('MANUAL INSTRUMENTATION: All route handlers wrapped with custom spans')
          print('MANUAL INSTRUMENTATION: Starting Flask app with integrated tracing')
          # ORIGINAL: Same Flask app startup
          app.run(host='0.0.0.0', port=80, debug=True)
          "
        ports:
        - containerPort: 80

        # MANUAL INSTRUMENTATION: ADD environment variables (REQUIRED)
        env:
        - name: OTEL_SERVICE_NAME
          value: "sample-app-manual"
        - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: "http://splunk-otel-collector-agent.ao.svc.cluster.local:4318/v1/traces"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.version=1.0.0,deployment.environment=production"

        readinessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: sample-app-service
  namespace: app-test
spec:
  selector:
    app: sample-app
  ports:
  - port: 8080
    targetPort: 80
    nodePort: 30080
  type: NodePort