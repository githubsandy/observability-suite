apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app
  namespace: app-test
  labels:
    app: sample-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sample-app
  template:
    metadata:
      labels:
        app: sample-app
    spec:
      containers:
      - name: sample-app
        image: tiangolo/uwsgi-nginx-flask:python3.11
        command:
        - python
        - -c
        - |
          from flask import Flask, jsonify
          import time, random, logging
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)
          app = Flask(__name__)

          def simulate_database_call():
              time.sleep(random.uniform(0.01, 0.05))
              return {'data': f'record_{random.randint(1000, 9999)}'}

          @app.route('/')
          def home():
              logger.info('Home endpoint accessed - BASELINE (no instrumentation)')
              db_data = simulate_database_call()
              return jsonify({'service': 'sample-app', 'status': 'running', 'version': '1.0.0', 'instrumentation': 'none', 'data': db_data, 'message': 'BASELINE: Flask app with NO instrumentation'})

          @app.route('/healthz')
          def health():
              return jsonify({'status': 'healthy', 'instrumentation': 'none'})

          @app.route('/api/users')
          def get_users():
              logger.info('Getting users - BASELINE')
              db_data = simulate_database_call()
              users = [{'id': 1, 'name': 'John Doe'}, {'id': 2, 'name': 'Jane Smith'}]
              return jsonify({'users': users, 'metadata': db_data, 'instrumentation': 'none'})

          app.run(host='0.0.0.0', port=80, debug=True)
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: sample-app-service
  namespace: app-test
spec:
  selector:
    app: sample-app
  ports:
  - port: 8080
    targetPort: 80
    nodePort: 30080
  type: NodePort