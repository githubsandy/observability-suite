apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app-trial
  namespace: splunk-trial-test
  labels:
    app: sample-app-trial
    purpose: splunk-o11y-alerting-poc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sample-app-trial
  template:
    metadata:
      labels:
        app: sample-app-trial
        purpose: splunk-o11y-alerting-poc
    spec:
      containers:
      - name: sample-app-trial
        image: curlimages/curl:latest
        env:
        - name: SPLUNK_TOKEN
          value: "pceyC0WC6s-0JiFsfzuWWA"
        - name: SPLUNK_REALM
          value: "au0"
        command: ["sh", "-c"]
        args:
        - |
          echo "Starting Splunk O11y Data Sender for CaloLab Alert POC"
          echo "Token: $SPLUNK_TOKEN"
          echo "Realm: $SPLUNK_REALM"
          echo "Target URL: https://ingest.$SPLUNK_REALM.signalfx.com/v2/datapoint"

          counter=0

          while true; do
            counter=$((counter + 1))
            timestamp=$(date +%s)000

            # Generate random metrics
            cpu_usage=$(awk -v min=15 -v max=95 'BEGIN{srand(); print min+rand()*(max-min)}')
            memory_usage=$(awk -v min=25 -v max=85 'BEGIN{srand(); print min+rand()*(max-min)}')

            # Create spikes periodically for testing alerts
            if [ $((counter % 10)) -eq 0 ]; then
              cpu_usage=$(awk -v min=91 -v max=98 'BEGIN{srand(); print min+rand()*(max-min)}')
              echo "🚨 HIGH CPU SPIKE: $cpu_usage%"
            fi

            if [ $((counter % 15)) -eq 0 ]; then
              memory_usage=$(awk -v min=89 -v max=95 'BEGIN{srand(); print min+rand()*(max-min)}')
              echo "🚨 HIGH MEMORY SPIKE: $memory_usage%"
            fi

            # Create JSON payload
            json_payload=$(cat <<EOF
          {
            "gauge": [
              {
                "metric": "calolab.cpu.utilization",
                "value": $cpu_usage,
                "timestamp": $timestamp,
                "dimensions": {
                  "service": "sample-app-calolab",
                  "host": "calolab-k8s-worker",
                  "environment": "trial",
                  "cluster": "calolab"
                }
              },
              {
                "metric": "calolab.memory.utilization",
                "value": $memory_usage,
                "timestamp": $timestamp,
                "dimensions": {
                  "service": "sample-app-calolab",
                  "host": "calolab-k8s-worker",
                  "environment": "trial",
                  "cluster": "calolab"
                }
              },
              {
                "metric": "calolab.application.uptime",
                "value": $counter,
                "timestamp": $timestamp,
                "dimensions": {
                  "service": "sample-app-calolab",
                  "environment": "trial",
                  "cluster": "calolab"
                }
              }
            ]
          }
          EOF
            )

            # Send to Splunk O11y
            response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -X POST \
              -H "X-SF-Token: $SPLUNK_TOKEN" \
              -H "Content-Type: application/json" \
              -H "User-Agent: CaloLab-Alert-POC/1.0" \
              -d "$json_payload" \
              "https://ingest.$SPLUNK_REALM.signalfx.com/v2/datapoint")

            # Extract HTTP status
            http_status=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

            current_time=$(date '+%H:%M:%S')

            if [ "$http_status" = "200" ]; then
              echo "✅ [$current_time] Metrics sent successfully - CPU: ${cpu_usage}%, Memory: ${memory_usage}%, Counter: $counter"
            else
              echo "❌ [$current_time] Failed to send metrics - HTTP Status: $http_status"
              echo "Response: $response"
            fi

            sleep 30
          done
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "print('alive')"
          initialDelaySeconds: 30
          periodSeconds: 60
        readinessProbe:
          exec:
            command:
            - python
            - -c
            - "print('ready')"
          initialDelaySeconds: 10
          periodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: sample-app-trial-service
  namespace: splunk-trial-test
  labels:
    app: sample-app-trial
    purpose: splunk-o11y-alerting-poc
spec:
  selector:
    app: sample-app-trial
  ports:
  - port: 80
    targetPort: 8080
    name: http
  type: ClusterIP

---
apiVersion: v1
kind: Namespace
metadata:
  name: splunk-trial-test
  labels:
    purpose: splunk-o11y-alerting-poc
    environment: trial